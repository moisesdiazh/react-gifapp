{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAsB5C,OAEI,aADA,CACA,QAAMC,SAbW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAQ,IAEzBR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCVlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAGTC,EAHS,iDAGwCC,UAAUH,GAHlD,+DAIYI,MAAMF,GAJlB,cAIDG,EAJC,gBAOMA,EAAKC,OAPX,uBAORC,EAPQ,EAORA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAf3B,kBAoBRM,GApBQ,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAKf,EAAKgB,IAAKN,IAEpB,4BAAIA,QCJHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KA+BxC,OAvBAC,qBAAU,WAGRxB,EAAQC,GACLwB,MAAK,SAACC,GAELH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGd,CAACpB,IAYGqB,ED7B0BK,CAAa1B,GAAhCa,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QAOpB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAIlDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAGYH,EAAOJ,KAAI,SAAAC,GAAG,OAGV,aADA,CACC,EAAD,eAEQA,GADCA,EAAIC,aEvBxBgB,EAAe,WAAM,MAIMzC,mBAAS,CAAC,aAJhB,mBAIvBQ,EAJuB,KAIXT,EAJW,KAc9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQS,EAAWe,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YClBlB4B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.8cdd3fed.chunk.js","sourcesContent":["//rafc\r\nimport React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'; // importando proptypes\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    //creamos un estado para el componente y saber que esta escribiendo\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n                            //recibimos el evento \r\n    const handleInputChange = (e) => {\r\n        //seteamos y podemos cambiar en la caja de texto\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        //\r\n        e.preventDefault(); //prevenimos el comportamiento por defecto del formulario\r\n        // console.log('Submit hecho');\r\n        if(inputValue.trim().length >2){ //condicion para que no puedan enviar menos que 2 letras\r\n\r\n            setCategories(categories => [inputValue, ...categories]); //cambiamos el valor\r\n            setInputValue(''); //borramos \r\n        }\r\n    };\r\n\r\n    return (\r\n        //se puede reemplazar el fragment por el form ya que cumplen la misma labor de agrupar\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = { \r\n    //para realizar requerido el setCategories para que pueda funcionar el AddCategory\r\n\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\n","\r\n    //creamos la función    //mandamos la categoria como argumento\r\nexport const getGifs = async(category) => {\r\n    \r\n        //función http                                      PARA PODER FILTRAR POR CATEGORIA\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=DwLkZmdF45qLOM5yjnIQyPE2CKkJ5zTl`;\r\n                const resp = await fetch(url);\r\n\r\n        //desestructuramos data \r\n        const {data} = await resp.json();\r\n\r\n        //mapeamos lo que queremos (id, title, la imagen)\r\n        const gifs = data.map(img => {\r\n\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url,\r\n\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n    }","import React from 'react'\r\n                            //desestructuramos para extraer lo que queremos\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            {/* mostramos la imagen */}\r\n            <img src={url} alt={title}></img> \r\n            {/* mostramos el titulo */}\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category); //usando el custom hook\r\n        //renombramos data con images        //mandamos como argumento la categoria al hook\r\n\r\n   \r\n    //recibimos la categoria y hacemos una petición http\r\n\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n  \r\n        {/* colocamos el loading */}\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n\r\n        <div className=\"card-grid\">\r\n                {\r\n                    // mandamos la data\r\n                    images.map(img => (\r\n\r\n                        //el componente de las imagenes\r\n                        <GifGridItem \r\n                            key={img.id} //llave del componente\r\n                            {...img} //operador spread(el array completo) con img\r\n                        />\r\n\r\n                    ))\r\n                }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n//mandamos la categoria desde el gifgrid como argumento\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  //le colocamos efectos a nuestros custom hook\r\n\r\n  useEffect(() => {\r\n    //ejecutamos la petición http\r\n\r\n    getGifs(category) //es una promesa\r\n      .then((imgs) => {\r\n        \r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      });\r\n  }, [category]);\r\n\r\n  //   setTimeout(() => {\r\n  //     //settimeout funcion que recibe un callback para poner un temporizador para ejecutar una accion\r\n\r\n  //     setState({\r\n  //       data: [1, 2, 3, 4, 5, 6, 7],\r\n  //       loading: false,\r\n  //     });\r\n  //   }, 3000);\r\n  //   // 3000 = 3 segundos\r\n\r\n  return state; // {data: [], loading: true}\r\n};\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    //se debe colocar asi en caso de hacer un array\r\n    const [categories, setCategories] = useState(['MessiApp']);\r\n\r\n\r\n    //constante para para poder añadir algo mediante el boton de agregar\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories, 'HunterxHunter']); \r\n    //     //creamos un nuevo estado del arreglo con setCategories, \r\n    //     //...categories es para traer el arreglo como tal y lo segundo es para añadir al arreglo\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}></AddCategory>\r\n            <hr></hr>\r\n\r\n\r\n            <ol>\r\n                {   //mapeamos el array de categories\r\n                    categories.map(category => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp'; //importamos el componente\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}